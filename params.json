{"name":"play-example-form","tagline":"Example form including multiple checkboxes and selection","body":"Overview\r\n========\r\n\r\n![screenshot](https://raw.github.com/ics-software-engineering/play-example-form/master/doc/play-example-form-homepage.png)\r\n\r\nThis application provides an example of form processing with the following features:\r\n\r\n  * [Play Version 2.3.7](https://www.playframework.com/)\r\n\r\n  * [Twitter Bootstrap 3.3.2](http://getbootstrap.com/).\r\n\r\n  * Individual Twitter Bootstrap [helper templates](https://github.com/ics-software-engineering/play-example-form/tree/master/app/views/bootstrap3) for each form control.\r\n\r\n  * Separation of [form backing classes](https://github.com/ics-software-engineering/play-example-form/tree/master/app/views/formdata) from [model classes](https://github.com/ics-software-engineering/play-example-form/tree/master/app/models).\r\n\r\n  * Validation done with [validate()](https://github.com/ics-software-engineering/play-example-form/blob/master/app/views/formdata/StudentFormData.java#L57-123), not annotations.\r\n\r\n  * Testing with [Fluentlenium](https://github.com/FluentLenium/FluentLenium).\r\n    \r\nThe design of this example differs in two significant ways from the traditional Play form processing examples. \r\n\r\n  1. **Distinct model and form classes.**  Most examples of form processing in Play \"overload\" the \r\n     model classes to serve two tasks:  (1) specify the database schema structure; and \r\n     (2) provide the \"backing class\" for forms.  Requiring a single class to perform these two tasks\r\n     appears to work well only when the models and forms are both simple and similar in structure. In this example system, the\r\n     [views.formdata package](https://github.com/ics-software-engineering/play-example-form/tree/master/app/views/formdata) provides \r\n     classes for form processing, and the [models package](https://github.com/ics-software-engineering/play-example-form/tree/master/app/models) provides\r\n     classes for database schemas. Since Play requires the backing classes for forms to have public fields,\r\n     this separation means that model classes can have private fields, avoiding [well documented problems](http://www.manning-sandbox.com/thread.jspa?messageID=143570&#143570). \r\n\r\n  2. **Explicit field constructors for Twitter Bootstrap 3**  The canonical recommendation by Play developers for users of\r\n     Twitter Bootstrap is to create a single \"implicit\" field constructor.  The problem with this recommendation\r\n     is that a single implicit field constructor cannot satisfy all of Twitter Bootstrap's layout\r\n     requirements for form controls (for example, multiple checkboxes). This example illustrates\r\n     a more general solution in which normal (i.e. \"explicit\") scala templates (i.e. field constructors) are defined in the \r\n     [views.bootstrap3 package](https://github.com/ics-software-engineering/play-example-form/tree/master/app/views/bootstrap3) for each of the Twitter Bootstrap controls. IMHO, the \r\n     code is significantly easier to understand and debug for Java-based Play framework users.  \r\n\r\nSteps to understanding the system\r\n---------------------------------\r\n\r\n**Run the application.**\r\n\r\nBegin by downloading the code, invoking \"activator run\" in your shell, then retrieving http://localhost:9000\r\nto display the single form illustrated at the top of this page. The form displays the fields\r\nassociated with a \"Student\":  Name, Password, Hobbies, Level, GPA, and Majors.  Some of these\r\nare required, some are optional. Try filling out the form in both valid and invalid ways and\r\npressing Submit to see what happens.\r\n\r\nWhen you submit a valid version of the form, the system will redisplay the form with exactly the \r\nsame data that you entered, and also show a representation of the Student model instance\r\ncreated from the form values.\r\n\r\n**Run the tests.**\r\n\r\nNext, type \"control-D\" in your shell to bring down the development server, and then \"activator test\"\r\nto invoke the test cases. You should get output similar to the following:\r\n\r\n    [~/projecthosting/github/play/play-example-form]-> activator test\r\n    [info] Loading project definition from /Users/johnson/projecthosting/github/play/play-example-form/project\r\n    [info] Updating {file:/Users/johnson/projecthosting/github/play/play-example-form/project/}play-example-form-build...\r\n    [info] Resolving org.fusesource.jansi#jansi;1.4 ...\r\n    [info] Done updating.\r\n    [info] Set current project to play-example-form (in build file:/Users/johnson/projecthosting/github/play/play-example-form/)\r\n    [info] Updating {file:/Users/johnson/projecthosting/github/play/play-example-form/}root...\r\n    [info] Resolving com.typesafe.trace#trace-sigar-libs;0.1.7 ...\r\n    [info] Done updating.\r\n    [info] Passed: Total 4, Failed 0, Errors 0, Passed 4\r\n    [success] Total time: 13 s, completed Mar 3, 2015 3:57:17 PM\r\n\r\nWe'll come back to this later, but this step verifies that tests run correctly in your environment.\r\n\r\n**Review the controllers.**\r\n\r\nNow review the controller class. [Application](https://github.com/ics-software-engineering/play-example-form/blob/master/app/controllers/Application.java)\r\nhas just two methods: getIndex() which displays the form in the index page and postIndex() that processes a form submission\r\nfrom the index page. See the [routes](https://github.com/ics-software-engineering/play-example-form/blob/master/conf/routes) file for how this is wired up.\r\n\r\nThe getIndex method takes a Student ID as a parameter. If the value is 0, then an empty form is\r\ndisplayed, otherwise the form is displayed pre-filled with the data associated with the Student ID.\r\nFor example, you can retrieve the data for the student with ID 1 using: http://localhost:9000/?id=1.\r\nThe system [instantiates a couple of students on startup](https://github.com/ics-software-engineering/play-example-form/blob/master/app/models/Student.java#L191-203). \r\n\r\nBy looking at the controller, you can see the basic approach for either form display (HTTP GET) or \r\nform submission (HTTP POST):\r\n  \r\n  * An instance of StudentFormData is passed to the templates for rendering. This class has public\r\n    fields as required by Play, and they are all String or List[String] because binding only works on strings.\r\n    \r\n  * Other component entities (Hobby, GradeLevel, GradePointAverage, Major) provide helper methods\r\n    to support display of their values as strings along with the student's current value(s) for\r\n    those components.\r\n    \r\n  * The [Student.makeInstance](https://github.com/ics-software-engineering/play-example-form/blob/master/app/models/Student.java#L165-185) and [Student.makeStudentFormData](https://github.com/ics-software-engineering/play-example-form/blob/master/app/models/Student.java#L150-162)\r\n    methods provide conversion between the form data and model representations of a Student.\r\n\r\n**Review the models.**\r\n\r\nSkim through the [models package](https://github.com/ics-software-engineering/play-example-form/tree/master/app/models). \r\nThere should be no surprises; it parallels the form pretty closely.  Some things to note:\r\n\r\n  * A Student entity contains non-primitive, complex components such as a list of Hobby entities and a list of Major entities.\r\n  \r\n  * The models have private fields and getters/setters. (Sorry, I'm old school that way.)     \r\n\r\n**Review the views.**\r\n\r\nThe [views package](https://github.com/ics-software-engineering/play-example-form/tree/master/app/views) \r\nis where things get most interesting.   The [main](https://github.com/ics-software-engineering/play-example-form/blob/master/app/views/main.scala.html)\r\nand [index](https://github.com/ics-software-engineering/play-example-form/blob/master/app/views/index.scala.html)\r\ntemplates are pretty much what you'd expect. \r\n\r\nNote that the main template shows how to import JQuery in case you want to use Bootstrap Javascript components.\r\n\r\nThe second thing to review is the [views.bootstrap3](https://github.com/ics-software-engineering/play-example-form/tree/master/app/views/bootstrap3)\r\nsubpackage, containing Bootstrap 3 Scala templates for various form controls. Kudos to [Jason\r\nPearson](https://github.com/kaeawc) to writing these templates and making other helpful changes.\r\n\r\nFinally, the [views.formdata](https://github.com/ics-software-engineering/play-example-form/tree/master/app/views/formdata)\r\nsubpackage contains the single backing class ([StudentFormData](https://github.com/ics-software-engineering/play-example-form/blob/master/app/views/formdata/StudentFormData.java)) required for this application.\r\nNote that the backing class consists of public fields containing the String data to be displayed/bound in the form,\r\nas well as a validate() method that determines if the submitted form data is valid or not.\r\n\r\n**Review the tests.**\r\n\r\nTesting is pretty straightforward, uses [Fluentlenium](https://github.com/FluentLenium/FluentLenium#what-is-fluentlenium-), and implements the \r\n[page object pattern](https://github.com/FluentLenium/FluentLenium/wiki/Page-Object-Pattern).\r\n\r\nStart by looking at [IndexPage](https://github.com/ics-software-engineering/play-example-form/blob/master/test/tests/pages/IndexPage.java).\r\nThis class implements a bunch of methods to fill out the form and check to see whether the \r\ndisplayed form contains a success or error message. Note that most of these methods depend upon\r\nfinding an HTML element with a specific ID, and so the Bootstrap Scala templates need to make\r\nsure these ID fields are set correctly.\r\n\r\nThe actual test code is in [ViewTest](https://github.com/ics-software-engineering/play-example-form/blob/master/test/tests/ViewTest.java).\r\nThere are four tests: one that just checks that we can retrieve the page, one that tests that\r\nsubmitting an empty form generates a validation error, one that submits a form filled out \r\nfrom a valid Student ID, and a final one that fills out a valid form manually by using the \r\nIndexPage methods. \r\n\r\n        \r\nIssues\r\n------\r\n\r\nWhile this code works and is pretty easy to understand, there are at least two design problems with it\r\nthat I can see:\r\n\r\n  * **Verbosity.**  It's kind of a drag to have two representations for a Student, one as a model and\r\n    one as a backing class for forms.   I know that I presented this as a feature, but at the end\r\n    of the day it's born of necessity.  Perhaps there exists an elegant way to implement composite entities\r\n    (i.e. a Student that contains a List of Hobbies) in which display, binding, and validation\r\n    can be done easily and understandably with a single class.\r\n    \r\n  * **Integrity.**  The code provides validation in the StudentFormData class, and certain\r\n    methods (such as Student.makeInstance) must assume that they are being passed a valid\r\n    StudentFormData instance.  That kind of assumption is worrisome, and annotation-based \r\n    constraints could avoid it.  Annotation-based constraints also offer the potential\r\n    to simultaneously apply to both the database model and the form validation, which would be really\r\n    nice.  As a first step, I played around for a while with [Custom Data Binding](http://www.playframework.com/documentation/2.0/JavaForms),\r\n    but could not get it to work correctly for lists of Hobbies.\r\n    \r\nIf you see ways to solve these problems, please feel free to fork this code and implement your changes. \r\n\r\nScreencast\r\n----------\r\n\r\nClick the image below to watch a 28 minute walkthrough of this system. \r\n\r\n*Note that the following screencast documents a previous version of this system which used Twitter Bootstrap 2.3.2 and Play 2.1.  While the templates in the bootstrap3 package\r\nhave been rewritten, the rest of the system remains unchanged.*\r\n\r\n[<img src=\"https://raw.github.com/ics-software-engineering/play-example-form/master/doc/play-example-form-screencast.png\" width=\"400\">](http://www.youtube.com/watch?v=247H9NVpMME)\r\n\r\n    \r\nAcknowledgements\r\n----------------\r\n\r\nThis example is a descendent of the original [play-form-kludge](https://github.com/philipmjohnson/play-form-kludge/tree/original)\r\nand [Jason Pearson](https://github.com/kaeawc)'s [very helpful improvements](https://github.com/philipmjohnson/play-form-kludge).\r\n\r\n    \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}